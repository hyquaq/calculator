{"version":3,"sources":["components/Screen.js","App.js","reportWebVitals.js","index.js"],"names":["Screen","value","preValue","operator","className","defaultProps","App","math","x","y","Number","toFixed","useState","currentValue","setCurrentValue","setPreValue","setOperator","isDot","setIsDot","handleClick","e","valueButton","target","getAttribute","isNumber","isNaN","parseInt","isClearAll","isClear","dot","isOperator","indexOf","pre","parseFloat","slice","console","log","onClick","disable","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39b53863.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nScreen.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n  preValue: PropTypes.number.isRequired,\r\n  operator: PropTypes.string,\r\n};\r\n\r\nScreen.defaultProps = {\r\n  value: 0,\r\n  preValue: 0,\r\n  operator: \"\",\r\n};\r\n\r\nfunction Screen({ value, preValue, operator }) {\r\n  return (\r\n    <>\r\n      <p className=\"output\">{value}</p>\r\n      <p className=\"output__mini\">{`${preValue} ${operator}`}</p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Screen;\r\n","import React, { useState } from \"react\";\r\nimport \"./styles/app.scss\";\r\nimport Screen from \"./components/Screen\";\r\n\r\nfunction App() {\r\n  const math = {\r\n    \"+\": function (x, y) {\r\n      return x + y;\r\n    },\r\n    \"-\": function (x, y) {\r\n      return Number((x - y).toFixed(10));\r\n    },\r\n    x: function (x, y) {\r\n      return x * y;\r\n    },\r\n    \"/\": function (x, y) {\r\n      return x / y;\r\n    },\r\n    \"%\": function (x, y) {\r\n      return x % y;\r\n    },\r\n  };\r\n  const [currentValue, setCurrentValue] = useState(0);\r\n  const [preValue, setPreValue] = useState(0);\r\n  const [operator, setOperator] = useState(\"\");\r\n  const [isDot, setIsDot] = useState(false);\r\n\r\n  function handleOperator(value) {\r\n    operator === \"\" &&\r\n      setOperator(() => {\r\n        setPreValue(currentValue);\r\n        setCurrentValue(0);\r\n        return value;\r\n      });\r\n    operator !== \"\" && setOperator(value);\r\n\r\n    setIsDot(false);\r\n  }\r\n\r\n  function handleCompute() {\r\n    operator !== \"\" && setCurrentValue(math[operator](preValue, currentValue));\r\n\r\n    operator !== \"\" && setPreValue(0);\r\n\r\n    operator !== \"\" &&\r\n      setOperator(() => {\r\n        setIsDot(false);\r\n        return \"\";\r\n      });\r\n  }\r\n\r\n  function handleClick(e) {\r\n    const valueButton = e.target.getAttribute(\"value\");\r\n    const isNumber = !isNaN(parseInt(valueButton));\r\n    const isClearAll = valueButton === \"C\";\r\n    const isClear = valueButton === \"<-\";\r\n    const dot = valueButton === \".\" && !isDot;\r\n    const isOperator = [\"+\", \"-\", \"x\", \"/\", \"%\"].indexOf(valueButton) !== -1;\r\n\r\n    const isEqual = valueButton === \"=\";\r\n\r\n    isEqual && operator !== \"\" && handleCompute();\r\n\r\n    isNumber &&\r\n      !isDot &&\r\n      setCurrentValue((pre) => parseFloat(`${pre}${valueButton}`));\r\n\r\n    isNumber &&\r\n      isDot &&\r\n      setCurrentValue((pre) => parseFloat(`${pre}.${valueButton}`));\r\n\r\n    isClearAll &&\r\n      setCurrentValue(() => {\r\n        setOperator(\"\");\r\n        setPreValue(0);\r\n        setIsDot(false);\r\n        return 0;\r\n      });\r\n\r\n    isClear &&\r\n      setCurrentValue((pre) =>\r\n        currentValue >= 10 ? parseFloat(`${currentValue}`.slice(0, -1)) : 0\r\n      );\r\n\r\n    dot && setIsDot(true);\r\n\r\n    isOperator && handleOperator(valueButton);\r\n\r\n    console.log({ currentValue, preValue }, isDot);\r\n  }\r\n\r\n  return (\r\n    <section className=\"container-fuild\">\r\n      <div className=\"row\">\r\n        <Screen value={currentValue} preValue={preValue} operator={operator} />\r\n      </div>\r\n      <div className=\"row number-pad\">\r\n        <div className=\"row\">\r\n          <span className=\"col\" onClick={handleClick} value=\"C\">\r\n            C\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"+/-\">\r\n            +/-\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"%\">\r\n            %\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"/\">\r\n            /\r\n          </span>\r\n        </div>\r\n        <div className=\"row\">\r\n          <span className=\"col\" onClick={handleClick} value=\"7\">\r\n            7\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"8\">\r\n            8\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"9\">\r\n            9\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"x\">\r\n            x\r\n          </span>\r\n        </div>\r\n        <div className=\"row\">\r\n          <span className=\"col\" onClick={handleClick} value=\"4\">\r\n            4\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"5\">\r\n            5\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"6\">\r\n            6\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"-\">\r\n            -\r\n          </span>\r\n        </div>\r\n        <div className=\"row\">\r\n          <span className=\"col\" onClick={handleClick} value=\"1\">\r\n            1\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"2\">\r\n            2\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"3\">\r\n            3\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"+\">\r\n            +\r\n          </span>\r\n        </div>\r\n        <div className=\"row\">\r\n          <span className=\"col\" onClick={handleClick} value=\"0\">\r\n            0\r\n          </span>\r\n          <span\r\n            className={isDot ? \"col disable\" : \"col\"}\r\n            onClick={handleClick}\r\n            disable=\"true\"\r\n            value=\".\"\r\n          >\r\n            .\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"<-\">\r\n            {\"<-\"}\r\n          </span>\r\n          <span className=\"col\" onClick={handleClick} value=\"=\">\r\n            =\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}